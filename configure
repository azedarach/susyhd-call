#!/bin/sh

# modified version of FlexibleSUSY configure script used for
# configuring SUSYHD C++ interface

PROGRAM_NAME=SUSYHDCall
SUSYHDCALL_MAJOR=0
SUSYHDCALL_MINOR=0
SUSYHDCALL_PATCH=1
SUSYHDCALL_VERSION="${SUSYHDCALL_MAJOR}.${SUSYHDCALL_MINOR}.${SUSYHDCALL_PATCH}"

# directory of this script
BASEDIR=$(dirname $0)

# absolute path to this script
ABSBASEDIR=$(cd $BASEDIR; pwd)

# config directory
CONFIGDIR="${BASEDIR}/config"

# current date
DATE="`date 2>/dev/null || echo unknown`"

# platform information
debmultiarch=""

# default library directories
ld_library_path="`echo ${LD_LIBRARY_PATH} | tr ':' ' '`"
default_lib_paths="${ld_library_path} /usr/lib /usr/local/lib"
default_inc_paths="/usr/include /usr/local/include"

# configure log file
logfile="$BASEDIR/config.log"
statusfile="$BASEDIR/config.status"
mathconfig="$BASEDIR/config.math"

# whether we are in 32-bit or 64-bit environment
machine_word_size="unknown"

# operating system
operating_system="unknown"

# kernel version (uname -r)
kernel_version="unknown"

# target makefile
MAKEFILE=$BASEDIR/Makefile
MAKEFILE_TMPL=${CONFIGDIR}/Makefile.in

MODULE_MK=${CONFIGDIR}/module.susyhdcall.mk
MODULE_MK_TMPL=${CONFIGDIR}/module.susyhdcall.mk.in

# target config header
MATH_CONFIGHDR=${BASEDIR}/mathematica/mathematica_config.h
MATH_CONFIGHDR_TMPL=${CONFIGDIR}/mathematica_config.h.in

# options
deprecated_options=""
options="                    \
   enable_compiler_warnings  \
   enable_debug              \
   enable_mathlink           \
   enable_static_libs        \
"

enable_compiler_warnings="no"
enable_debug=""
enable_mathlink="no"
enable_static_libs="yes"

# corresponding preprocessor define statements
DEFINE_ENABLE_DEBUG="#undef ENABLE_DEBUG"
DEFINE_ENABLE_MATHLINK_H="#undef ENABLE_MATHLINK_H"

CPPFLAGS=""
CXX="g++"
CXXFLAGS="-std=c++11 -O2"
CXX_DEP_GEN="${CXX}"
CXXFLAGS_DEP_GEN="-std=c++11"
CC="gcc"
CFLAGS="-O2"
CC_DEP_GEN="${CC}"
CFLAGS_DEP_GEN=""
THREADLIBS=""
DLLIBS=""
RTLIBS=""
NEEDSUUID="no"
UUIDLIBS=""
LDFLAGS=""
LDLIBS=""
LIBEXT=".a"
MAKELIB="ar cru"

FSADDONS_DIR=""
ADDON_DIR="susyhd_call"
ADDON_NAME="susyhdcall"

MATH="math"
mlink_lib_name=""
mlink_lib_dir=""
mlink_inc_dir=""
MLINKFLAGS=""
MLINKLIBS=""
EXTRA_MLINK_LIBS=""

# required Mathematica interface version
required_mlink_interface="3"
default_mlink_interface="4"

# MathLink or WSTP interface version (0 = unknown)
mlink_interface_version="0"

# C++ compiler type and version
cxx_compiler_type="unknown"
cxx_compiler_version="unknown"

# required C++ compiler versions
required_cxx_compiler_version="unknown"
required_gpp_compiler_version="4.8.2"
required_clang_compiler_version="3.6.0"
#required_icpc_compiler_version="12.1.0"

# C++ dependency generator type and version
cxx_dep_gen_type="unknown"
cxx_dep_gen_version="unknown"

# C++ compiler and dependency generator versions accepting `-std=c++11'
std_cxx11_compiler_version="unknown"
std_cxx11_dep_gen_version="unknown"
std_cxx11_gpp_version="4.7.0"
std_cxx11_clang_version="3.0.0"
std_cxx11_icpc_version="13.0.0"

# required Mathematica version
required_mathematica_version="8"

# Mathematica version (0 = unknown)
MATH_VERSION="0"

# string to eval when script terminates, normally or not
actions_at_exit=""

#_____________________________________________________________________
at_exit() {
    local action
    for action in "$@"; do
        printf "%s\n" "$actions_at_exit" | grep -F -e "$action" > /dev/null ||
        actions_at_exit="$actions_at_exit
$action"
    done
}

#_____________________________________________________________________
do_actions_at_exit() {
    logmsg "Executing clean-up actions:$actions_at_exit"
    eval "$actions_at_exit"
}

#_____________________________________________________________________
write_configure_parameters() {
    # This function writes all parameters [$*] to config.status
    configargs="$*"
    configargs=`echo $configargs | sed 's,\\\,\\\\,g'`
    echo "$configargs" > $statusfile
}

#_____________________________________________________________________
message() {
    # Write a simple message to std out (and to the log file)
    if test $# -lt 1 ; then
        echo "message: Too few arguments"
        return 1
    fi
    echo "$*"
    logmsg "$*"
}

#_____________________________________________________________________
logmsg() {
    # Write message to the log file.  Use -n as first parameter to
    # prevent a newline at the end of the message.
    if test $# -lt 1 ; then
        echo "logmsg: Too few arguments"
        return 1
    fi
    if test "x$1" = "x-n"; then
       shift
       printf "%s" "$*" >> $logfile
    else
       echo "$*" >> $logfile
    fi
}

#_____________________________________________________________________
log_package_information() {
    logmsg "Package:    ${PROGRAM_NAME}"
    logmsg "Version:    ${SUSYHDCALL_VERSION}"
    logmsg "Date:       ${DATE}"
}

#_____________________________________________________________________
guess_machine_word_size() {
    chip=`uname -m | tr '[A-Z]' '[a-z]'`
    case "$chip" in
        *32|i[36]86)
             machine_word_size="32"; return 0 ;;
        *64) machine_word_size="64"; return 0 ;;
        *)   machine_word_size="unknown"
             message "Warning: could not guess machine word size"
             return 1 ;;
    esac
}

#_____________________________________________________________________
contains() {
    # Check if string $1 contains $2
    if test $# -lt 2 ; then
        echo "contains: Too few arguments"
        return 1
    fi
    string="$1"
    substring="$2"
    for f in ${string}; do
        if test "x$f" = "x$substring" ; then
            return 0 # found
        fi
    done
    return 1 # not found
}

#_____________________________________________________________________
contains_not() {
    # Check if string $1 does not contain $2
    if test $# -lt 2 ; then
        echo "contains: Too few arguments"
        return 1
    fi
    contains "$1" "$2"
    if [ $? -eq 0 ]; then
        return 1
    else
        return 0
    fi
}

#_____________________________________________________________________
check_library() {
    # This function will try to locate a library [$1] in the directory
    # given in $2 or in a default path [$*].
    #
    # The result of the search is stored in found_lib and found_dir,
    # which should be immediately copied, since the variables value will
    # be overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -lt 3 ; then
        echo "check_library: Too few arguments"
        return 1
    fi

    # Save arguments in local names
    lib=$1       ; shift
    libdirl=$1
    libdirs="$*"
    # check if we got a specific argument as to where the library
    # is to be found
    if test ! "x$libdirl" = "x" ; then
        libdirs=$libdirl
    fi

    # Write a message
    checking_msg "$lib"

    libs=""
    for i in $lib ; do
        for ext in .a .lib "" .so .sl .dylib .dll.a ; do
            libs="$libs $i$ext"
        done
    done

    found_dir=""
    found_lib=""

    if test "x$machine_word_size" = "x64"; then
        for p in ${libdirs}; do
            libdir64=`echo "$p" | grep lib | sed -e 's|lib$|lib64|g' -e 's|lib/|lib64/|g'`
            libdirs="$libdirs $libdir64"
        done
    fi
    if test "x$machine_word_size" = "x32"; then
        for p in ${libdirs}; do
            libdir32=`echo "$p" | grep lib | sed -e 's|lib$|lib32|g' -e 's|lib/|lib32/|g'`
            libdirs="$libdirs $libdir32"
        done
    fi
    # look first in the DEB_HOST_MULTIARCH directories
    if test "x$debmultiarch" != "x" ; then
        for p in ${libdirs}; do
            multiarch_libdir=`echo "$p" | sed "s|lib$|lib/$debmultiarch|"`
            libdirs="$multiarch_libdir $libdirs"
        done
    fi

    for p in ${libdirs}; do
        for l in ${libs}; do
            liblist=`echo $p/$l` # expands wildcard
            for n in ${liblist} ; do
                if test -f $n ; then
                    found_dir=$p
                    found_lib=$l
                    break 3
                fi
            done
        done
    done

    if test "x$found_dir" = "x" || test "x$found_lib" = "x" ; then
        result "not found in $libdirs"
        return 1
    else
        result "found in $found_dir"
    fi

    return 0
}

#_____________________________________________________________________
check_header() {
    # This function will try to locate a header file [$1] in the
    # directory given in $2 or in a default path [$*].
    #
    # The result of the search is stored in found_hdr and found_dir,
    # which should be immediately copied, since the variables value
    # will be overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -lt 2 ; then
        echo "check_header: Too few arguments"
        return 1
    fi

    # Save arguments in local names
    hdr=$1       ; shift
    hdrdirl=$1
    hdrdirs="$*"
    # check if we got a specific argument as to where the library
    # is to be found
    if test ! "x$hdrdirl" = "x" ; then
        hdrdirs=$hdrdirl
    fi

    # Write a message
    checking_msg "$hdr"

    hdrs=""
    for i in $hdr ; do
        for ext in "" .h .hpp ; do
            hdrs="$hdrs $i$ext"
        done
    done

    found_dir=""
    found_hdr=""

    for p in ${hdrdirs}; do
        for h in ${hdrs}; do
            hdrlist=`echo $p/$h` # expands wildcard
            for n in ${hdrlist} ; do
                if test -f $n ; then
                    found_dir=$p
                    found_hdr=$hdr
                    break 3
                fi
            done
        done
    done

    if test "x$found_dir" = "x" || test "x$found_hdr" = "x" ; then
        result "not found in $hdrdirs"
        return 1
    else
        result "found in $found_dir"
    fi

    return 0
}

#_____________________________________________________________________
checking_msg() {
    # Write a simple "checking" message to std out.
    if test $# -lt 1 ; then
        echo "checking_msg: Too few arguments"
        return 1
    fi
    printf "Checking for"
    logmsg -n "Checking for"
    while test $# -gt 1 ; do
        printf " %s," "$1"
        logmsg -n " $1,"
        shift
        if test $# -eq 1 ; then
            printf " or"
            logmsg -n " or"
        fi
    done
    printf " %s ... " "$1"
    logmsg -n " $1 ... "
}

#_____________________________________________________________________
result() {
    echo "$*"
    logmsg ""
    logmsg "   Result: $*"
}

#_____________________________________________________________________
check_symbol() {
    # This function will try to locate a symbol [$1] in a specific
    # library [$2] and in a given directory [$3].
    # The result of the check is stored in found_symbol, 1 if true,
    # 0 otherwise, which should be immediately copied, since the variable
    # will be overwritten at next invocation of this function.

    local symbol
    local symbollib
    local symboldir

    # Assert that we got enough arguments
    if test $# -ne 3 ; then
        echo "check_symbol: not 3 arguments"
        found_symbol=0
        return 1
    fi

    # Save arguments in logical names
    symbol=$1     ; shift
    symbollib=$1  ; shift
    symboldir=$1

    if test "x$symbollib" = "x" ; then
        found_symbol=0
        return 1
    fi

    symbollib=`echo $symbollib | sed -e 's/^-l/lib/'`

    if test ! "x$symboldir" = "x" ; then
        symboldir=`echo $symboldir | sed -e 's/^-L//'`
    fi

    # Check if we got a specific argument as to where the library
    # is to be found
    symbolfile=$symbollib
    exts=".so .lib .dylib"
    if test ! "x$shared" = "xno" ; then
        exts="$exts .a"
    else
        exts=".a $exts"
    fi

    usrlib="/usr/lib"
    if test "x$machine_word_size" = "x32" ; then
        usrlib="/usr/lib32 $usrlib"
    fi
    if test "x$machine_word_size" = "x64" ; then
        usrlib="/usr/lib64 $usrlib"
    fi

    for d in "$symboldir" $usrlib ; do
        logmsg " Checking in $d"
        if test ! -r $d/$symbollib ; then
            logmsg "  $d/$symbollib not readable"
            for i in $exts ; do
                logmsg "   Checking extension $i with $d/$symbollib"
                if test -r $d/$symbollib$i ; then
                    logmsg "   $d/$symbollib$i readable"
                    symbolfile=$d/$symbollib$i
                    break 2
                fi
             done
        else
            logmsg "  $d/$symbollib readable"
            symbolfile=$d/$symbollib
            break
        fi
    done

    if test "x$symbolfile" = "x" || test ! -r $symbolfile ; then
       found_symbol=0
       logmsg " Symbol not found"
       return 1
    fi

    checking_msg "$symbol in $symbolfile"
    nm $symbolfile 2>&1 | grep $symbol > /dev/null 2>&1 ||
    nm -D $symbolfile 2>&1 | grep $symbol > /dev/null 2>&1
    if test $? -eq 0 ; then
        found_symbol=1
        logmsg -n "symbol found"
    else
       nm $symbolfile 2>&1 | grep "no symbols" > /dev/null 2>&1
        # if test $? -eq 0 ; then
        #     logmsg " $symbolfile is stripped, trying to link"
        #     # stripped library - only safe test is to link against the library
        #     check_link $symbolfile "" $symbol
        #     found_symbol=$link_result
        # else
            found_symbol=0
        # fi
    fi

    if test $found_symbol -eq 1 ; then
        result "ok"
        return 0
    else
        result "no"
        return 1
    fi
}

#_____________________________________________________________________
split_version() {
    local version="$1"
    local major_var="$2"
    local minor_var="$3"
    local patch_var="$4"

    set -- $(printf "%s" "$version" |
             sed 's/^\([[:digit:].]*\).*$/\1/' | tr . ' ')
    eval "$major_var=\"${1:-0}\""
    eval "$minor_var=\"${2:-0}\""
    eval "$patch_var=\"${3:-0}\""
}

#_____________________________________________________________________
major_minor_patch_at_least() {
    local     major=$1
    local     minor=$2
    local     patch=$3
    local min_major=$4
    local min_minor=$5
    local min_patch=$6

    if   [ $major -gt $min_major ]; then return 0
    elif [ $major -lt $min_major ]; then return 1
    elif [ $minor -gt $min_minor ]; then return 0
    elif [ $minor -lt $min_minor ]; then return 1
    elif [ $patch -ge $min_patch ]; then return 0
    else                                 return 1
    fi
}

#_____________________________________________________________________
version_at_least() {
    local version="$1"
    local min_version="$2"

    local version_format_=`echo "${version}" | sed 's/[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*//'`

    if test "x${version_format_}" = "x" ;
    then
	local major minor patch
	split_version "$version" major minor patch

	local m_major m_minor m_patch
	split_version "$min_version" m_major m_minor m_patch

	major_minor_patch_at_least $major $minor $patch $m_major $m_minor $m_patch
    else
	if [ ${version} -ge ${min_version} ] ; then
	    return 0
	else
	    return 1
	fi
    fi
}

#_____________________________________________________________________
try_compile_cpp_program() {
    # This function compiles a C++ testprogram with the header
    # inclusion given in [$1] and a statement given in [$2].

    if test $# -ne 2 ; then
        echo "try_compile_cpp_program: Two arguments required!"
        exit 1
    fi

    local _header="$1"
    local _statement="$2"

    logmsg ""
    logmsg "==================================="
    logmsg "Trying to compile test program with"
    logmsg "   Header: ${_header}"
    logmsg "   Statement: ${_statement}"

    local _suppress_separator=true

    try_compile_run_cpp_program "${_header}
int main() {
   ${_statement};
   return 0;
}"
}

#_____________________________________________________________________
try_compile_run_cpp_program() {
    # This function compiles a C++ source code given in [$1]
    # using the compiler given in [$2] or $CXX if $2 is unset
    # with compiler flags given in [$3] or $CXXFLAGS if $3 is unset.
    # It subsequently executes the resulting executable whose
    # output through stdout and stderr is stored in cpp_output
    # and whose exit code is stored in cpp_exit.

    if [ $# -lt 1 -o $# -gt 3 ]; then
        echo "try_compile_run_cpp_program: 1, 2, or 3 arguments required!"
        exit 1
    fi

    local cxx="$2"
    if [ -z "$cxx" ]; then
        if test "x${CXX}" = "x"; then
            echo "try_compile_run_cpp_program: CXX is not set!"
            exit 1
        fi
        cxx="$CXX"
    fi
    local cxxflags="$3"
    [ -z "$cxxflags" ] && cxxflags="$CXXFLAGS"
    local source_code="$1"
    local _src="${BASEDIR}/conftest.cpp"
    local _exe="${BASEDIR}/conftest.x"
    local _log="${BASEDIR}/conftest.log"

    at_exit "rm -f \"${_exe}\" \"${_src}\" \"${_log}\""

    logmsg ""
    [ "$_suppress_separator" = true ] ||
    logmsg "==================================="
    logmsg "Trying to compile test program"

    printf "%s\n" "$source_code" > ${_src}

    # compile the source
    ${cxx} -o ${_exe} ${cxxflags} ${_src} > ${_log} 2>&1 || {
        logmsg "   Status: compilation failed!"
        logmsg ""
        logmsg "The test program was:"
        logmsg "---------------------"
        printf "%s\n" "$source_code" >> $logfile
        logmsg "---------------------"
        logmsg "Compiler: ${cxx}"
        logmsg "Compiler flags: ${cxxflags}"
        logmsg "Compilation command:"
        echo "   ${cxx} -o ${_exe} ${cxxflags} ${_src} > ${_log} 2>&1" >> $logfile
        logmsg "Compiler error message:"
        cat ${_log} >> $logfile
        logmsg "==================================="
        return 1
    }

    logmsg "   Status: compilation successful."

    # run the executable
    logmsg "Running executable: $_exe"
    cpp_output=$(${_exe} 2>&1)
    cpp_exit="$?"
    logmsg "The executable returned exit code: $cpp_exit"
    if [ -z "$cpp_output" ]; then
        logmsg "The executable produced no output."
    else
        logmsg "The executable produced output:"
        printf "%s\n" "${cpp_output}" >> $logfile
    fi

    logmsg "==================================="

    return 0
}

#_____________________________________________________________________
exists_in_path () {
    # This function will try to locate an executable [$1] in $PATH.
    #
    # The result of the search is stored in cmd, which should be
    # immediately copied, since the variables value will be
    # overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -ne 1 ; then
        echo "exists_in_path: Exactly one argument required"
        return 1
    fi

    cmd=$(command -v -- "$1")
    case "$cmd" in
        /*) return 0 ;;
        alias\ *) return 1 ;; # alias
        *) return 1 ;; # built-in or function
    esac
}

#_____________________________________________________________________
is_empty_dir() {
    if test $# -ne 1 ; then
        echo "is_empty_dir: Exactly one argument required"
        return 1
    fi

    find $1 -maxdepth 0 -empty | read v
}

#_____________________________________________________________________
check_install() {
    if test -z "${FSADDONS_DIR}"; then
        return 0
    fi

    checking_msg "availability of install"

    if exists_in_path "install"; then
        result "ok"
    else
        result "no ok"
        message "Error: The installation program \`install' needs to be installed."
        message "   \`install' is part of the GNU coreutils and can be downloaded from"
        message "   https://www.gnu.org/software/coreutils/"
        exit 1
    fi
}

#_____________________________________________________________________
check_addon_install_dir() {
    if test -z "${FSADDONS_DIR}"; then
        return 0
    fi

    checking_msg "addon installation directory"

    # check if $FSADDONS_DIR/$ADDON_DIR exists
    if test -d "${FSADDONS_DIR}/${ADDON_DIR}"; then
        # check if $FSADDONS_DIR/$ADDON_DIR/ is empty
        if is_empty_dir "${FSADDONS_DIR}/${ADDON_DIR}"; then
            result "ok"
        else
            result "ok"
            message "Warning: addon installation directory is non-empty."
            message "   Existing files might be overwritten!"
        fi
    else
        result "ok"
        logmsg "Addon installation directory does not exist."
    fi

    logmsg "Source code installation directory: ${FSADDONS_DIR}/${ADDON_DIR}"
}

#_____________________________________________________________________
check_platform() {
    # checks which platform we have

    logmsg ""
    logmsg "# Platform information"
    logmsg ""
    logmsg "hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`"
    logmsg "uname -m = `(uname -m) 2>/dev/null || echo unknown`"
    logmsg "uname -r = `(uname -r) 2>/dev/null || echo unknown`"
    logmsg "uname -s = `(uname -s) 2>/dev/null || echo unknown`"
    logmsg "uname -v = `(uname -v) 2>/dev/null || echo unknown`"
    logmsg "Machine word size: ${machine_word_size}"
    logmsg ""

    local _paths="`echo $PATH | tr ':' ' '`"
    for p in ${_paths}; do
        logmsg "PATH: ${p}"
    done
    logmsg ""

    for p in ${ld_library_path}; do
        logmsg "LD_LIBRARY_PATH: ${p}"
    done
    logmsg ""

    operating_system="`(uname -s) 2>/dev/null || echo unknown`"
    kernel_version="`(uname -r) 2>/dev/null || echo unknown`"
}

#_____________________________________________________________________
check_multiarch() {
    local linuxdist=""
    debmultiarch=""

    exists_in_path "lsb_release"
    if [ -n "$cmd" ] ; then
        if lsb_release -d | grep -i 'ubuntu\|debian\|mint' > /dev/null 2>&1; then
            linuxdist="multiarch"
        fi
    fi

    if test "x$linuxdist" = "xmultiarch"; then
        if `which dpkg-architecture > /dev/null 2>&1` ; then
            if `dpkg-architecture -qDEB_HOST_MULTIARCH > /dev/null 2>&1` ; then
                checking_msg "dpkg-architecture"
                debmultiarch=`dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null`
                result "$debmultiarch"
            fi
        else
            result "`basename $0`: dpkg-architecture or dpkg-dev MUST be installed"
            exit 1
        fi
    fi
}

#_____________________________________________________________________
check_thread_libs() {
    check_library "libpthread" "" "$default_lib_paths"
    if [ -z "$found_lib" ]; then
        message "Error: libpthread must be installed!"
        exit 1
    fi
    THREADLIBS=-l$(echo "$found_lib" | sed 's/^lib\(.*\)\..*$/\1/')
}

#_____________________________________________________________________
check_dl_libs() {
    check_library "libdl" "" "$default_lib_paths"
    if [ -z "$found_lib" ] ; then
	message "Error: libdl must be installed!"
	exit 1
    fi
    DLLIBS=-l$(echo "$found_lib" | sed 's/^lib\(.*\)\..*$/\1/')
}

#_____________________________________________________________________
check_rt_libs() {
    check_library "librt" "" "$default_lib_paths"
    if [ -z "$found_lib" ] ; then
	message "Error: librt must be installed!"
	exit 1
    fi
    RTLIBS=-l$(echo "$found_lib" | sed 's/^lib\(.*\)\..*$/\1/')
}

#_____________________________________________________________________
check_uuid_libs() {
    check_library "libuuid" "" "$default_lib_paths"
    if [ -z "$found_lib" ] ; then
	message "Error: libuuid must be installed!"
	exit 1
    fi
    UUIDLIBS=-l$(echo "$found_lib" | sed 's/^lib\(.*\)\..*$/\1/')
}


#_____________________________________________________________________
check_cxx_compiler_type() {
    checking_msg "type of C++ compiler ${CXX}"

    get_cxx_compiler_type "$CXX" cxx_compiler_type || return 1

    case "$cxx_compiler_type" in
    gnu)   result "GNU"
           required_cxx_compiler_version="$required_gpp_compiler_version"
           std_cxx11_compiler_version="$std_cxx11_gpp_version" ;;
    clang) result "Clang"
           required_cxx_compiler_version="$required_clang_compiler_version"
           std_cxx11_compiler_version="$std_cxx11_clang_version" ;;
#    intel) result "Intel"
#           required_cxx_compiler_version="$required_icpc_compiler_version"
#           std_cxx11_compiler_version="$std_cxx11_icpc_version" ;;
    *)     result "unknown" ;;
    esac

    logmsg "C++ compiler type: ${cxx_compiler_type}"
}

#_____________________________________________________________________
check_cxx_compiler_version() {
    checking_msg "$CXX compiler version >= $required_cxx_compiler_version"

    case "$cxx_compiler_type" in
    gnu)   get_gpp_version   "$CXX" cxx_compiler_version || return 1 ;;
    clang) get_clang_version "$CXX" cxx_compiler_version || return 1 ;;
#    intel) get_icpc_version  "$CXX" cxx_compiler_version || return 1 ;;
    *)     message "Warning: could not check C++ compiler version because"
           message "   its type is unknown."
           return 1 ;;
    esac

    version_at_least \
        "$cxx_compiler_version" "$required_cxx_compiler_version" || {
        result "not ok (version $cxx_compiler_version)"
        message "Error: the installed $CXX version is too old."
        message "   Please install version $required_cxx_compiler_version or higher."
        exit 1
    }
    result "ok (version $cxx_compiler_version)"
    logmsg "   Required $CXX version: $required_cxx_compiler_version"
    logmsg "   $CXX version found: $cxx_compiler_version"
}

#_____________________________________________________________________
check_icpc_features() {
    local compiler="$1"
    local version="$2"

    checking_msg "$compiler compiler features"

    local major minor patch
    split_version "$version" major minor patch

    # disable multi-threading for versions < 14.0.0
    if ! major_minor_patch_at_least $major $minor $patch "14" "0" "0" &&
       [ "$enable_threads" = "yes" ]; then
        message ""
        message "   Warning: multi-threading support requires $compiler 14.0.0 or newer."
        enable_threads="no"
    else
        result "ok"
    fi
}

#_____________________________________________________________________
check_cxx_dep_gen_type() {
    checking_msg "type of C++ file dependency generator ${CXX_DEP_GEN}"

    get_cxx_compiler_type "$CXX_DEP_GEN" cxx_dep_gen_type || return 1

    case "$cxx_dep_gen_type" in
    gnu)   result "GNU"
           std_cxx11_dep_gen_version="$std_cxx11_gpp_version" ;;
    clang) result "Clang"
           std_cxx11_dep_gen_version="$std_cxx11_clang_version" ;;
#    intel) result "Intel"
#           std_cxx11_dep_gen_version="$std_cxx11_icpc_version" ;;
    *)     result "unknown"
    esac

    logmsg "C++ dependency generator type: ${cxx_dep_gen_type}"
}

#_____________________________________________________________________
check_cxx_dep_gen_version() {
    checking_msg "$CXX_DEP_GEN dependency generator version"

    case "$cxx_dep_gen_type" in
    gnu)   get_gpp_version   "$CXX_DEP_GEN" cxx_dep_gen_version || return 1 ;;
    clang) get_clang_version "$CXX_DEP_GEN" cxx_dep_gen_version || return 1 ;;
#    intel) get_icpc_version  "$CXX_DEP_GEN" cxx_dep_gen_version || return 1 ;;
    *)     result "unknown"
           message "Warning: could not check C++ dependency generator version because"
           message "   its type is unknown."
           return 1 ;;
    esac

    result "$cxx_dep_gen_version"
    logmsg "   $CXX_DEP_GEN dependency generator version found: $cxx_dep_gen_version"
}

#_____________________________________________________________________
get_cxx_compiler_type() {
    if test $# -ne 2; then
        message "get_cxx_compiler_type(): too few arguments"
        exit 1
    fi

    local compiler="$1"
    local ret_var="$2"

    local output
    output=$($compiler -dM -E -x c++ /dev/null) || {
        message "Warning: could not determine compiler type of $compiler because"
        message "   execution of $compiler failed."
        return 1
    }

    local compiler_type
    if   printf "%s" "$output" |
         grep '#define[[:space:]]*\(__llvm__\|__clang__\)' > /dev/null; then
        compiler_type=clang
#    elif printf "%s" "$output" |
#         grep '#define[[:space:]]*__INTEL_COMPILER' > /dev/null; then
#        compiler_type=intel
    elif printf "%s" "$output" |
         grep '#define[[:space:]]*__GNUC__' > /dev/null; then
        compiler_type=gnu
    else
        compiler_type=unknown
    fi

    eval "$ret_var=\"$compiler_type\""
}

#_____________________________________________________________________
get_gpp_version() {
    if test $# -ne 2; then
        message "get_gpp_version(): too few arguments"
        exit 1
    fi

    local compiler="$1"
    local ret_var="$2"

    local output
    output=$($compiler -dM -E -x c++ /dev/null) || {
        message "Warning: could not determine $compiler version because"
        message "   execution of $compiler failed."
        return 1
    }
    local major=$(printf "%s" "$output" |
        sed 's/^.*__GNUC__[[:space:]]*\([[:digit:]]*\).*$/\1/p;d')
    local minor=$(printf "%s" "$output" |
        sed 's/^.*__GNUC_MINOR__[[:space:]]*\([[:digit:]]*\).*$/\1/p;d')
    local patch=$(printf "%s" "$output" |
        sed 's/^.*__GNUC_PATCHLEVEL__[[:space:]]*\([[:digit:]]*\).*$/\1/p;d')

    eval "$ret_var=\"$major.$minor.$patch\""
}

#_____________________________________________________________________
get_icpc_version() {
    if test $# -ne 2; then
        message "get_icpc_version(): too few arguments"
        exit 1
    fi

    local compiler="$1"
    local ret_var="$2"

    local output
    output=$($compiler -dM -E -x c++ /dev/null) || {
        message "Warning: could not determine $compiler version because"
        message "   execution of $compiler failed."
        return 1
    }
    local version=$(printf "%s" "$output" |
        sed 's/^.*__INTEL_COMPILER[[:space:]]*\([[:digit:]]*\)\([[:digit:]]\)\([[:digit:]]\).*$/\1.\2.\3/p;d')

    eval "$ret_var=\"$version\""
}

#_____________________________________________________________________
check_cxx_compiler_features() {
    case "$cxx_compiler_type" in
    intel) check_icpc_features "$CXX" "$cxx_compiler_version" ;;
    esac
}

#_____________________________________________________________________
get_clang_version() {
    if test $# -ne 2; then
        message "get_clang_version(): too few arguments"
        exit 1
    fi

    local compiler="$1"
    local ret_var="$2"

    local output
    output=$($compiler -dM -E -x c++ /dev/null) || {
        message "Warning: could not determine $compiler version because"
        message "   execution of $compiler failed."
        return 1
    }
    local major=$(printf "%s" "$output" |
        sed 's/^.*__clang_major__[[:space:]]*\([[:digit:]]*\).*$/\1/p;d')
    local minor=$(printf "%s" "$output" |
        sed 's/^.*__clang_minor__[[:space:]]*\([[:digit:]]*\).*$/\1/p;d')
    local patch=$(printf "%s" "$output" |
        sed 's/^.*__clang_patchlevel__[[:space:]]*\([[:digit:]]*\).*$/\1/p;d')

    eval "$ret_var=\"$major.$minor.$patch\""
}

#_____________________________________________________________________
check_cc() {
    checking_msg "C compiler $CC"
    exists_in_path "$CC"
    if [ -z "$cmd" ] ; then
        result "not found"
        message "Error: A C compiler must be installed to compile the interface!"
        message "   Use --with-cc= to specify the C compiler to be used."
        exit 1
    else
        result "found $cmd"
    fi
}

#_____________________________________________________________________
check_cxx() {
    checking_msg "C++ compiler $CXX"
    exists_in_path "$CXX"
    if [ -z "$cmd" ] ; then
        result "not found"
        message "Error: A C++ compiler must be installed to compile the interface!"
        message "   Use --with-cxx= to specify the C++ compiler to be used."
        exit 1
    else
        result "found $cmd"
    fi
}

#_____________________________________________________________________
check_cxxflags() {
    case "$CXXFLAGS" in
    *-std=c++11*)
        version_at_least "$cxx_compiler_version" \
                         "$std_cxx11_compiler_version" || {
            message "Replacing \`-std=c++11' by \`-std=c++0x' since $CXX is older than $std_cxx11_compiler_vers
ion"
            CXXFLAGS=$(
                printf "%s" "$CXXFLAGS" | sed 's/-std=c++11/-std=c++0x/')
        }
    esac

    if test "x$enable_compiler_warnings" = "xyes" ; then
        if test "x${cxx_compiler_type}" = "xgnu"; then
            CXXFLAGS="${CXXFLAGS} -Wall -pedantic -Wextra\
 -Wcast-align -Woverloaded-virtual -Wnon-virtual-dtor\
 -Wno-unused-local-typedefs"
        elif test "x${cxx_compiler_type}" = "xintel"; then
            CXXFLAGS="${CXXFLAGS} -w3 -Wnon-virtual-dtor"
        fi
    fi

    if test "x$enable_static_libs" = "xno" ; then
        # check if -fPIC is in CXXFLAGS
        case "${CXX}" in
            g++*|clang++*|icpc*)
                if contains_not "${CXXFLAGS}" "-fPIC" ; then
                    message "   Warning: could not find -fPIC in CXXFLAGS, appending it"
                    CXXFLAGS="${CXXFLAGS} -fPIC"
                fi ;;
        esac
    fi

    case "$operating_system" in
    CYGWIN_NT*)
        ! printf "%s" "${CXXFLAGS}" |
        grep -e '-U[[:space:]]*__STRICT_ANSI__' > /dev/null 2>&1 && {
            message "Appending -U__STRICT_ANSI__ to CXXFLAGS to enable math macros"
            message "   possibly disabled on Cygwin."
            CXXFLAGS="${CXXFLAGS} -U__STRICT_ANSI__"
        } ;;
    esac
}

#_____________________________________________________________________
check_cxx_dep_gen() {
    checking_msg "C++ file dependency generator $CXX_DEP_GEN"
    exists_in_path "$CXX_DEP_GEN"
    if [ -z "$cmd" ] ; then
        result "not found"
        message "Error: A C++ file dependency generator must be installed!"
        message "   Use --with-cxx-dep-gen= to specify the dependency generator"
        message "   that should be used."
        exit 1
    else
        result "found $cmd"
    fi
}

#_____________________________________________________________________
check_cxxflags_dep_gen() {
    if version_at_least "$cxx_dep_gen_version" \
                        "$std_cxx11_dep_gen_version"; then
        CXXFLAGS_DEP_GEN="-std=c++11"
    else
        CXXFLAGS_DEP_GEN="-std=c++0x"
    fi
}

#_____________________________________________________________________
find_symbol_using_pkgconfig() {
    local symbol
    local pkg
    local ldpaths
    local libnames
    pkg="$1"
    linker_flags=""
    type pkg-config > /dev/null 2>&1 || {
        logmsg "pkg-config not found"
        return 1
    }
    pkg-config --exists "$pkg" || {
        logmsg "pkg-config does not manage $pkg"
        return 1
    }
    ldpaths=$(pkg-config --libs-only-L "$pkg")
    libnames=$(pkg-config --libs-only-l "$pkg")
    shift
    for symbol; do
        for dopt in $default_lib_paths $ldpaths; do
            for lopt in $libnames; do
                if check_symbol "$symbol" "$lopt" "$dopt"; then
                    logmsg "found $symbol in $dopt $lopt"
                    linker_flags=$(pkg-config --libs "$pkg")
                    continue 3
                fi
            done
        done
        return 1
    done
    return 0
}

#_____________________________________________________________________
check_makelib() {
    checking_msg "build library command $MAKELIB"
    # strip arguments from the actual command
    makelib_cmd=`echo $MAKELIB | awk '{ print $1; }'`

    # check if $makelib_cmd can create shared libraries
    if test "x$enable_static_libs" = "xno" ; then
        if test "x$makelib_cmd" = "xar" ; then
            message ""
            message "   Error: $makelib_cmd cannot be used to create shared libraries!"
            message "   Please use --with-make-lib-cmd=\"gcc -shared -o\" or something similar."
            exit 1
        fi
    fi

    exists_in_path "$makelib_cmd"
    if [ -z "$cmd" ] ; then
        result "not found"
        message "Error: A program which builds libraries must be installed!"
        message "   Use --with-make-lib-cmd= to specify the library creator program to be used."
        exit 1
    else
        result "found $cmd"
    fi
}

#_____________________________________________________________________
check_math_cmd() {
    checking_msg "Mathematica kernel $MATH"
    exists_in_path "$MATH"
    if [ -z "$cmd" ] ; then
        result "not found"
        message "Error: Mathematica needs to be installed to run the meta code!"
        message "   You can use the --with-math-cmd= option to specify the location of"
        message "   the math kernel."
        case "$operating_system" in
            Linux)  message "   It is usually installed in /usr/local/Wolfram/Mathematica/" ;;
            Darwin) message "   It is usually installed in /Applications/Mathematica.app/"  ;;
            CYGWIN_NT*) message "   It is usually installed in /cygdrive/c/Program Files/Wolfram Research/Mathematica/" ;;
        esac
        exit 1
    else
        result "found $cmd"
    fi
}

#_____________________________________________________________________
check_mathematica_version() {
    local _math_version_check_progr="${BASEDIR}/check_math_version.m"
    local _needs_uuid_check="${BASEDIR}/needs_libuuid"
    rm -f ${mathconfig} ${_math_version_check_progr}
    cat <<EOF > ${_math_version_check_progr}
error = 0;
Put[\$VersionNumber, "${mathconfig}"];
If[\$VersionNumber >= 10,
   Put[yes, "${_needs_uuid_check}"],
   Put[no, "${_needs_uuid_check}"]
  ];
If[\$VersionNumber < ${required_mathematica_version},
   error = 1;
  ];
Quit[error];
EOF

    checking_msg "Mathematica version >= ${required_mathematica_version}"
    if "$MATH" -run "Get[\"${_math_version_check_progr}\"]" > /dev/null 2>&1;
    then
        if test -r "${mathconfig}" ; then
            MATH_VERSION=`cat ${mathconfig}`
            result "ok (version ${MATH_VERSION})"
        else
            result "ok"
        fi
	if test -r "${_needs_uuid_check}" ; then
	    NEEDSUUID=`cat ${_needs_uuid_check}`
	else
	    message "Warning: unable to determine if libuuid is required"
	fi
    else
        result "not ok"
        message "Error: Mathematica ${required_mathematica_version} or higher needs to be installed!"
        rm -f ${_math_version_check_progr}
	rm -f ${_needs_uuid_check}
        exit 1
    fi
    rm -f ${_math_version_check_progr}
    rm -f ${_needs_uuid_check}
}

#_____________________________________________________________________
find_default_mathlink_dir() {
    local _find_mathlink_dir_prog="${BASEDIR}/find_mathlink_dir.m"
    local _mathlink_install_dir="${BASEDIR}/mathlink_install_dir"
    rm -f ${_find_mathlink_dir_prog}
    cat <<EOF >${_find_mathlink_dir_prog}
PutAppend[\$InstallationDirectory, \$SystemID, "${_mathlink_install_dir}"];
Quit[]
EOF

    if "$MATH" -run "Get[\"${_find_mathlink_dir_prog}\"]" >/dev/null 2>&1;
    then
	# default location of libraries
	default_mlink_path=""
	if test -r "${_mathlink_install_dir}" ; then
	    mathematica_install_dir=`cat ${_mathlink_install_dir} | sed '1!d' | sed 's/"//' | sed 's/"//'`
	    mlink_devkit_dir=`cat ${_mathlink_install_dir} | sed '2!d' | sed 's/"//' | sed 's/"//'`
	    case "$operating_system" in
		Linux)
		    default_mlink_path="${mathematica_install_dir}/SystemFiles/Links/MathLink/DeveloperKit/${mlink_devkit_dir}/CompilerAdditions"
		    ;;
		# note: this hasn't been tested
		Darwin)
		    default_mlink_path="${mathematica_install_dir}/SystemFiles/Links/MathLink/DeveloperKit/${mlink_devkit_dir}/CompilerAdditions"
		    ;;
		*)
		    message "Error: this operating system is currently not supported!"
		    rm -f ${_find_mathlink_dir_prog}
		    rm -f ${_mathlink_install_dir}
		    exit 1		    
		    ;;
	    esac
	else
	  message "Warning: unable to read MathLink defaults"  
	fi
    else
	message "Error: Mathematica ${required_mathematica_version} or higher needs to be installed!"
	rm -f ${_find_mathlink_dir_prog}
	rm -f ${_mathlink_install_dir}
	exit 1
    fi
    rm -f ${_find_mathlink_dir_prog}
    rm -f ${_mathlink_install_dir}
    return 0
}

#_____________________________________________________________________
check_mathlink_libs() {
    find_default_mathlink_dir

    if test "x${mlink_interface_version}" = "x0" ; then
	result "not ok"
	message "Error: could not determine name of MathLink library!"
	message "   You can specify the name with the --with-mathlink-lib= flag"
	exit 1			
    fi

    case "$operating_system" in
	Linux)
	    if test "x${mlink_lib_name}" = "x" ; then
		if test "x${machine_word_size}" = "x32" ; then
		    mlink_lib_name="libML32i${mlink_interface_version}"
		elif test "x${machine_word_size}" = "x64" ; then
		    mlink_lib_name="libML64i${mlink_interface_version}"
		else
		    result "not ok"
		    message "Error: could not determine name of MathLink library!"
		    message "   You can specify the name with the --with-mathlink-lib= flag"
		    exit 1			
		fi
	    fi
	    ;;
	Darwin)
	    if test "x${mlink_lib_name}" = "x" ; then
		mlink_lib_name="libMLi${mlink_interface_version}"
	    fi
	    ;;
	*)
	    result "not ok"
	    message "Error: this operating system is currently not supported!"
	    exit 1		    
	    ;;
    esac

    check_library "${mlink_lib_name}" \
	"${mlink_lib_dir}" "${default_mlink_path}" "${default_lib_paths}"
    if [ -z "$found_lib" ]; then
	result "not ok"
	message "Error: could not find MathLink library ${mlink_lib_name}!"
	message "   A MathLink library must be installed to use the interface"
	exit 1
    fi
    local MLINKLIBS_=-l$(echo "$found_lib" | sed 's/^lib\(.*\)\..*$/\1/')
    if [ -z "$mlink_lib_dir" ] ; then
	# assume that the linker will look in the default paths
	MLINKLIBS="-L${default_mlink_path} $MLINKLIBS_"
    else
	MLINKLIBS="-L${mlink_lib_dir} $MLINKLIBS_"
    fi

    # get extra libraries needed for linking
    case "$operating_system" in
	Linux) EXTRA_MLINK_LIBS="-lm \$(THREADLIBS) \$(RTLIBS) -lstdc++ \$(DLLIBS) \$(UUIDLIBS)" ;;
	# this is incomplete:
	Darwin) EXTRA_MLINK_LIBS="-lstdc++" ;;
    esac
}

#_____________________________________________________________________
check_mathlink_interface_version() {
    checking_msg "MLINTERFACE >= $required_mlink_interface"

    try_compile_run_cpp_program "#include <iostream>
#include <mathlink.h>
int main() {
   std::cout << MLINTERFACE << '\n';
   return 0;
}" "$CXX" "${MLINKFLAGS}" && [ $cpp_exit = 0 ] || {
	result "unknown"
	message "Warning: could not determine MathLink interface version because"
	message "   compilation or execution of the test program failed."
	return 1
    }

    local mlink_intf_vers="$cpp_output"

    version_at_least "$mlink_intf_vers" "$required_mlink_interface" || {
	result "not ok (interface ${mlink_intf_vers})"
	message "Error: the installed MathLink version is too old."
	exit 1
    }
    mlink_interface_version="${mlink_intf_vers}"
    result "ok (interface ${mlink_intf_vers})"
    logmsg "   Required MLINTERFACE: ${required_mlink_interface}"
    logmsg "   MLINTERFACE found: ${mlink_intf_vers}"
}

#_____________________________________________________________________
check_mathlink_incl() {
    find_default_mathlink_dir

    check_header "mathlink.h" "$mlink_inc_dir" \
	"$default_mlink_path" "$default_inc_paths"
    if test "x$found_hdr" = "x" ; then
	message "Error: could not find mathlink.h in ${mlink_inc_dir} " \
	    "${default_mlink_path} ${default_inc_paths}"
	exit 1
    else
	if contains_not "${MLINKFLAGS}" "-I$found_dir" ; then
	    MLINKFLAGS="${MLINKFLAGS} -I$found_dir"
	fi
    fi
}

#_____________________________________________________________________
find_default_wstp_dir() {
    local _find_wstp_dir_prog="${BASEDIR}/find_wstp_dir.m"
    local _wstp_install_dir="${BASEDIR}/wstp_install_dir"
    rm -f ${_find_wstp_dir_prog}
    cat <<EOF >${_find_wstp_dir_prog}
PutAppend[\$InstallationDirectory, \$SystemID, "${_wstp_install_dir}"];
Quit[]
EOF

    if "$MATH" -run "Get[\"${_find_wstp_dir_prog}\"]" >/dev/null 2>&1;
    then
	# default location of libraries
	default_mlink_path=""
	if test -r "${_wstp_install_dir}" ; then
	    mathematica_install_dir=`cat ${_wstp_install_dir} | sed '1!d' | sed 's/"//' | sed 's/"//'`
	    mlink_devkit_dir=`cat ${_wstp_install_dir} | sed '2!d' | sed 's/"//' | sed 's/"//'`
	    case "$operating_system" in
		Linux)
		    default_mlink_path="${mathematica_install_dir}/SystemFiles/Links/WSTP/DeveloperKit/${mlink_devkit_dir}/CompilerAdditions"
		    ;;
		# note: this hasn't been tested
		Darwin)
		    default_mlink_path="${mathematica_install_dir}/SystemFiles/Links/WSTP/DeveloperKit/${mlink_devkit_dir}/CompilerAdditions"
		    ;;
		*)
		    message "Error: this operating system is currently not supported!"
		    rm -f ${_find_wstp_dir_prog}
		    rm -f ${_wstp_install_dir}
		    exit 1		    
		    ;;
	    esac
	else
	  message "Warning: unable to read WSTP defaults"  
	fi
    else
	message "Error: Mathematica ${required_mathematica_version} or higher needs to be installed!"
	rm -f ${_find_wstp_dir_prog}
	rm -f ${_wstp_install_dir}
	exit 1
    fi
    rm -f ${_find_wstp_dir_prog}
    rm -f ${_wstp_install_dir}
    return 0
}

#_____________________________________________________________________
check_wstp_libs() {
    find_default_wstp_dir

    if test "x${mlink_interface_version}" = "x0" ; then
	result "not ok"
	message "Error: could not determine name of WSTP library!"
	message "   You can specify the name with the --with-wstp-lib= flag"
	exit 1			
    fi

    case "$operating_system" in
	Linux)
	    if test "x${mlink_lib_name}" = "x" ; then
		if test "x${machine_word_size}" = "x32" ; then
		    mlink_lib_name="libWSTP32i${mlink_interface_version}"
		elif test "x${machine_word_size}" = "x64" ; then
		    mlink_lib_name="libWSTP64i${mlink_interface_version}"
		else
		    result "not ok"
		    message "Error: could not determine name of WSTP library!"
		    message "   You can specify the name with the --with-wstp-lib= flag"
		    exit 1			
		fi
	    fi
	    ;;
	Darwin)
	    if test "x${mlink_lib_name}" = "x" ; then
		mlink_lib_name="libWSTPi${mlink_interface_version}"
	    fi
	    ;;
	*)
	    result "not ok"
	    message "Error: this operating system is currently not supported!"
	    exit 1		    
	    ;;
    esac

    check_library "${mlink_lib_name}" \
	"${mlink_lib_dir}" "${default_mlink_path}" "${default_lib_paths}"
    if [ -z "$found_lib" ]; then
	result "not ok"
	message "Error: could not find WSTP library ${mlink_lib_name}!"
	message "   A WSTP library must be installed to use the interface"
	exit 1
    fi
    local MLINKLIBS_=-l$(echo "$found_lib" | sed 's/^lib\(.*\)\..*$/\1/')
    if [ -z "$mlink_lib_dir" ] ; then
	# assume that the linker will look in the default paths
	MLINKLIBS="-L${default_mlink_path} $MLINKLIBS_"
    else
	MLINKLIBS="-L${mlink_lib_dir} $MLINKLIBS_"
    fi

    # get extra libraries needed for linking
    case "$operating_system" in
	Linux) EXTRA_MLINK_LIBS="-lm \$(THREADLIBS) \$(RTLIBS) -lstdc++ \$(DLLIBS) \$(UUIDLIBS)" ;;
	# this is incomplete:
	Darwin) EXTRA_MLINK_LIBS="-lstdc++" ;;
    esac
}

#_____________________________________________________________________
check_wstp_interface_version() {
    checking_msg "WSINTERFACE >= $required_mlink_interface"

    try_compile_run_cpp_program "#include <iostream>
#include <wstp.h>
int main() {
   std::cout << WSINTERFACE << '\n';
   return 0;
}" "$CXX" "${MLINKFLAGS}" && [ $cpp_exit = 0 ] || {
	result "unknown"
	message "Warning: could not determine WSTP interface version because"
	message "   compilation or execution of the test program failed."
	return 1
    }

    local mlink_intf_vers="$cpp_output"

    version_at_least "$mlink_intf_vers" "$required_mlink_interface" || {
	result "not ok (interface ${mlink_intf_vers})"
	message "Error: the installed WSTP version is too old."
	exit 1
    }
    mlink_interface_version="${mlink_intf_vers}"
    result "ok (interface ${mlink_intf_vers})"
    logmsg "   Required WSINTERFACE: ${required_mlink_interface}"
    logmsg "   WSINTERFACE found: ${mlink_intf_vers}"
}

#_____________________________________________________________________
check_wstp_incl() {
    find_default_wstp_dir

    check_header "wstp.h" "$mlink_inc_dir" \
	"$default_mlink_path" "$default_inc_paths"
    if test "x$found_hdr" = "x" ; then
	message "Error: could not find wstp.h in ${mlink_inc_dir} " \
	    "${default_mlink_path} ${default_inc_paths}"
	exit 1
    else
	if contains_not "${MLINKFLAGS}" "-I$found_dir" ; then
	    MLINKFLAGS="${MLINKFLAGS} -I$found_dir"
	fi
    fi
}

#_____________________________________________________________________
enable_defines() {
    if test "x$enable_static_libs" = "xno" ; then
        # check the library extension
        if test "x$LIBEXT" = "x.a" ; then
            message "  Warning: library extension $LIBEXT is reserved for static libraries."
            message "    Please consider using .so as library extension, or similar, e.g."
            message "    --with-lib-ext=\".so\""
        fi
    fi

    if test "x$enable_debug" = "xyes" ; then
        DEFINE_ENABLE_DEBUG="#define ENABLE_DEBUG 1"
        CXXFLAGS="$CXXFLAGS -g"
        FFLAGS="$FFLAGS -g"
        message "Enabling debug mode"
        logmsg "   ${DEFINE_ENABLE_DEBUG}"
        logmsg "   CXXFLAGS = ${CXXFLAGS}"
        logmsg "   FFLAGS   = ${FFLAGS}"
    elif test "x$enable_debug" = "x" ; then
        DEFINE_ENABLE_DEBUG="#undef ENABLE_DEBUG"
        logmsg "Disabling debug mode"
        logmsg "   ${DEFINE_ENABLE_DEBUG}"
    elif test "x$enable_debug" = "xno" ; then
        DEFINE_ENABLE_DEBUG="#undef ENABLE_DEBUG"
        CPPFLAGS="$CPPFLAGS -DNDEBUG"
        message "Disabling debug mode and assertions"
        logmsg "   ${DEFINE_ENABLE_DEBUG}"
        logmsg "   CPPFLAGS = ${CPPFLAGS}"
    fi

    if test "x$enable_mathlink" = "xno" ; then
	DEFINE_ENABLE_MATHLINK_H="#undef ENABLE_MATHLINK_H"
	logmsg "   ${DEFINE_ENABLE_MATHLINK_H}"
    else
	DEFINE_ENABLE_MATHLINK_H="#define ENABLE_MATHLINK_H 1"
	logmsg "Enabling use of MathLink"
	logmsg "   ${DEFINE_ENABLE_MATHLINK_H}"
    fi
}

#_____________________________________________________________________
replace_markers() {
    sed -e "s|@SUSYHDCALL_VERSION@|$SUSYHDCALL_VERSION|" \
	-e "s|@SUSYHDCALL_MAJOR@|$SUSYHDCALL_MAJOR|" \
	-e "s|@SUSYHDCALL_MINOR@|$SUSYHDCALL_MINOR|" \
	-e "s|@SUSYHDCALL_PATCH@|$SUSYHDCALL_PATCH|" \
	-e "s|@PKGNAME@|$PROGRAM_NAME|"    \
	-e "s|@ABSBASEDIR@|$ABSBASEDIR|"   \
	-e "s|@FSADDONS_DIR@|$FSADDONS_DIR|" \
	-e "s|@ADDON_DIR@|$ADDON_DIR|" \
	-e "s|@ADDON_NAME@|$ADDON_NAME|" \
	-e "s|@THREADLIBS@|$THREADLIBS|" \
	-e "s|@DLLIBS@|$DLLIBS|" \
	-e "s|@RTLIBS@|$RTLIBS|" \
	-e "s|@UUIDLIBS@|$UUIDLIBS|" \
	-e "s|@CPPFLAGS@|$CPPFLAGS|"       \
        -e "s|@CXXFLAGS@|$CXXFLAGS|"       \
        -e "s|@CXXFLAGS_DEP_GEN@|$CXXFLAGS_DEP_GEN|"   \
        -e "s|@CXX@|$CXX|"                 \
        -e "s|@CXX_DEP_GEN@|$CXX_DEP_GEN|" \
        -e "s|@CFLAGS@|$CFLAGS|"           \
        -e "s|@CFLAGS_DEP_GEN@|$CFLAGS_DEP_GEN|" \
        -e "s|@CC@|$CC|"                   \
        -e "s|@CC_DEP_GEN@|$CC_DEP_GEN|"   \
	-e "s|@LDFLAGS@|$LDFLAGS|"         \
        -e "s|@LDLIBS@|$LDLIBS|"           \
	-e "s|@MAKELIB@|$MAKELIB|"         \
	-e "s|@MLINKFLAGS@|$MLINKFLAGS|"   \
	-e "s|@MLINKLIBS@|$MLINKLIBS|"     \
	-e "s|@EXTRA_MLINK_LIBS@|$EXTRA_MLINK_LIBS|" \
	-e "s|@ENABLE_MATHLINK_H@|$enable_mathlink|" \
        -e "s|@ENABLE_DEBUG@|$enable_debug|"      \
        -e "s|@ENABLE_STATIC_LIBS@|$enable_static_libs|" \
        -e "s|@MATH@|$MATH|"               \
        -e "s|@LIBEXT@|$LIBEXT|"
}

#_____________________________________________________________________
help() {
cat <<EOF
Usage: ./`basename $0` [options]
Options:

  --help,-h         Print this help message

enable/disable options, prefix with either --enable- or --disable-

  compiler-warnings Enable compiler warnings (default: $enable_compiler_warnings)
  debug             Debug messages and assertions (no default)
  mathlink          Use MathLink instead of WSTP for linking with Mathematica (default: $enable_mathlink)
  static-libs       Create static libraries (default: $enable_static_libs)

Package directories and compilation settings

  --with-boost-libdir=      Path to search for BOOST libraries
  --with-boost-incdir=      Path to search for BOOST headers
  --with-cc=                C compiler (default: $CC)
  --with-cflags=            C compiler flags (default: $CFLAGS)
  --with-cc-dep-gen=        C file dependency generator (default: $CC_DEP_GEN)
  --with-cxx=               C++ compiler (default: $CXX)
  --with-cxxflags=          C++ compiler flags (default: $CXXFLAGS)
  --with-cxx-dep-gen=       C++ file dependency generator (default: $CXX_DEP_GEN)
  --with-fs-addons-dir=     Path to FlexibleSUSY addons directory
  --with-ldflags=           Linker flags (default: $LDFLAGS)
  --with-ldlibs=            Additional libraries to be linked (default: $LDLIBS)
  --with-lib-ext=           Library extension (default: $LIBEXT)
  --with-make-lib-cmd       Command to make library (default: $MAKELIB)
  --with-math-cmd=          Mathematica kernel (default: $MATH)
  --with-mathlink-lib=      Name of MathLink library to use
  --with-mathlink-libdir=   Path to search for MathLink libraries
  --with-mathlink-incdir=   Path to search for mathlink.h header
  --with-wstp-lib=          Name of WSTP library to use
  --with-wstp-libdir=       Path to search for WSTP libraries
  --with-wstp-incdir=       Path to search for wstp.h
EOF
}

trap do_actions_at_exit 0
trap "exit 1" INT QUIT TERM

rm -f $logfile
write_configure_parameters "$*"

if test $# -gt 0 ; then
    while test ! "x$1" = "x" ; do
	case "$1" in
	    -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
	    *) optarg= ;;
	esac

	case $1 in
	    --enable-*)
		f=`echo $1 | sed -e 's/--//' -e 's/-/_/g'`
		eval prev='$'`echo ${f}`
		if test "x${prev}" = "xyes" ; then
		    echo "INFO: $1: already enabled by default."
		fi
		if test ! "x`echo ${deprecated_options} | grep ${f}`" = "x" ; then
		    echo "WARNING: option $1 is deprecated and ignored"'!'
		fi
		eval ${f}=yes
		for c in $options ; do
		    if test "x$c" = "x$f" ; then
			f=""
		    fi
		done
		for c in $deprecated_options ; do
		    if test "x$c" = "x$f" ; then
			f=""
		    fi
		done
		if test "x$f" != "x" ; then
		    echo "Invalid option '$1'. Try $0 --help" ; exit 1 ;
		fi
		;;
	    --disable-*)
                f=`echo $1 | sed -e 's/--disable/enable/' -e 's/-/_/g'`
		eval prev='$'`echo ${f}`
                if test "x${prev}" = "xno"; then
                    echo "INFO: $1: already disabled by default."
                fi
                eval ${f}=no
                for c in $options ; do
                    if test "x$c" = "x$f" ; then
                        f=""
                    fi
                done
                if test "x$f" != "x" ; then
                    echo "Invalid option '$1'. Try $0 --help" ; exit 1 ;
                fi
                ;;
	    --with-boost-libdir=*)   boost_lib_dir=$optarg ;;
	    --with-boost-incdir=*)   boost_inc_dir=$optarg ;;
            --with-cc=*)             CC=$optarg ;;
            --with-cflags=*)         CFLAGS=$optarg ;;
            --with-cc-dep-gen=*)     CC_DEP_GEN=$optarg ;;
            --with-cxx=*)            CXX=$optarg ;;
            --with-cxxflags=*)       CXXFLAGS=$optarg ;;
            --with-cxx-dep-gen=*)    CXX_DEP_GEN=$optarg ;;
            --with-fs-addons-dir=*)  FSADDONS_DIR=$optarg ;;
            --with-ldflags=*)        LDFLAGS=$optarg ;;
            --with-ldlibs=*)         LDLIBS=$optarg ;;
            --with-lib-ext=*)        LIBEXT=$optarg ;;
            --with-make-lib-cmd=*)   MAKELIB=$optarg ;;
            --with-math-cmd=*)       MATH=$optarg ;;
	    --with-mathlink-lib=*)      mlink_lib_name=$optarg ;;
	    --with-mathlink-libdir=*)   mlink_lib_dir=$optarg ;;
	    --with-mathlink-incdir=*)   mlink_inc_dir=$optarg ;;
	    --with-wstp-lib=*)      mlink_lib_name=$optarg ;;
	    --with-wstp-libdir=*)   mlink_lib_dir=$optarg ;;
	    --with-wstp-incdir=*)   mlink_inc_dir=$optarg ;;
            --help|-h)               help; exit 0 ;;
            *)  echo "Invalid option '$1'. Try $0 --help" ; exit 1 ;;
	esac
	shift
    done
fi

log_package_information
guess_machine_word_size
check_platform
check_install
check_addon_install_dir
check_multiarch
check_cxx
check_cxx_compiler_type
check_cxx_compiler_version
check_cxx_compiler_features
check_cxxflags
check_cxx_dep_gen
check_cxx_dep_gen_type
check_cc
check_makelib
check_math_cmd
check_mathematica_version
# additional libraries needed for linking
if test "x${operating_system}" = "xLinux" ; then
    check_thread_libs
    check_dl_libs
    check_rt_libs
    if test "x${NEEDSUUID}" = "xyes" ; then
	check_uuid_libs
    fi
fi
if test "x${enable_mathlink}" = "xyes" ; then
    check_mathlink_incl
    check_mathlink_interface_version
    check_mathlink_libs
else
    check_wstp_incl
    check_wstp_interface_version
    check_wstp_libs
fi

enable_defines

replace_markers \
    < $MAKEFILE_TMPL > $MAKEFILE

replace_markers \
    < $MODULE_MK_TMPL > $MODULE_MK

sed -e "s|@DATE@|$DATE|"                             \
    -e "s|@DEFINE_ENABLE_MATHLINK_H@|$DEFINE_ENABLE_MATHLINK_H|" \
    < $MATH_CONFIGHDR_TMPL > $MATH_CONFIGHDR

echo "$SUSYHDCALL_VERSION" > ${CONFIGDIR}/version
